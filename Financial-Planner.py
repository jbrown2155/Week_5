{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Unit 5 - Financial Planning\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 441,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initial imports\n",
    "import os\n",
    "import requests\n",
    "import pandas as pd\n",
    "from dotenv import load_dotenv\n",
    "import alpaca_trade_api as tradeapi\n",
    "import quandl as quan\n",
    "import requests as request\n",
    "import json\n",
    "import matplotlib.pyplot as mplot\n",
    "from MCForecastTools import MCSimulation\n",
    "import pytz\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 442,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load .env enviroment variables\n",
    "load_dotenv()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 1 - Personal Finance Planner"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Collect Crypto Prices Using the `requests` Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set current amount of crypto assets\n",
    "btc = 1.2\n",
    "eth = 5.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Crypto API URLs\n",
    "btc_url = \"https://api.alternative.me/v2/ticker/Bitcoin/?convert=CAD\"\n",
    "eth_url = \"https://api.alternative.me/v2/ticker/Ethereum/?convert=CAD\"\n",
    "\n",
    "btc_response = requests.get(btc_url).json()\n",
    "btc_price = btc_response[\"data\"][\"1\"][\"quotes\"][\"CAD\"][\"price\"]\n",
    "# Fetch current ETH price\n",
    "eth_response = requests.get(eth_url).json()\n",
    "eth_price = eth_response[\"data\"][\"1027\"][\"quotes\"][\"CAD\"][\"price\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The current value of your 1.2 BTC is $55694.42\n",
      "The current value of your 5.3 ETH is $16500.25\n",
      "The total value of your crypto portfolio is $72194.67\n"
     ]
    }
   ],
   "source": [
    "# Compute current value of my crpto\n",
    "btc_value = btc * btc_price\n",
    "eth_value = eth * eth_price\n",
    "crypto_total = btc_value + eth_value\n",
    "\n",
    "# Print current crypto wallet balance\n",
    "\n",
    "print(f\"The current value of your {btc} BTC is ${btc_value:0.2f}\")\n",
    "print(f\"The current value of your {eth} ETH is ${eth_value:0.2f}\")\n",
    "print(f\"The total value of your crypto portfolio is ${crypto_total:0.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Collect Investments Data Using Alpaca: `SPY` (stocks) and `AGG` (bonds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Current amount of shares\n",
    "spy = 50\n",
    "agg = 200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set Alpaca API key and secret\n",
    "alpaca_api_key = os.getenv(\"ALPACA_API_KEY\") \n",
    "alpaca_secret_key = os.getenv(\"ALPACA_API_SECRET\")\n",
    "\n",
    "# Create the Alpaca API object\n",
    "alpaca = tradeapi.REST(ALPACA_API_KEY,ALPACA_API_SECRET,api_version = \"v2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"5\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-05-20 00:00:00-04:00</th>\n",
       "      <td>114.08</td>\n",
       "      <td>114.3</td>\n",
       "      <td>114.08</td>\n",
       "      <td>114.29</td>\n",
       "      <td>5647134</td>\n",
       "      <td>411.8</td>\n",
       "      <td>416.625</td>\n",
       "      <td>411.67</td>\n",
       "      <td>415.24</td>\n",
       "      <td>69426295</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                    SPY  \\\n",
       "                             open   high     low   close   volume   open   \n",
       "time                                                                       \n",
       "2021-05-20 00:00:00-04:00  114.08  114.3  114.08  114.29  5647134  411.8   \n",
       "\n",
       "                                                              \n",
       "                              high     low   close    volume  \n",
       "time                                                          \n",
       "2021-05-20 00:00:00-04:00  416.625  411.67  415.24  69426295  "
      ]
     },
     "execution_count": 448,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Format current date as ISO format\n",
    "today = pd.Timestamp(\"2021-05-20\", tz=\"America/Chicago\").isoformat()\n",
    "\n",
    "# Set the tickers\n",
    "ticker = [\"AGG\", \"SPY\"]\n",
    "\n",
    "# Set timeframe to '1D' for Alpaca API\n",
    "timeframe = \"1D\"\n",
    "\n",
    "# Get current closing prices for SPY and AGG\n",
    "stocks_close = alpaca.get_barset(ticker, timeframe, start = today, end= today).df\n",
    "\n",
    "\n",
    "# Preview DataFrame\n",
    "stocks_close"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current AGG closing price: $114.29\n",
      "Current SPY closing price: $415.24\n"
     ]
    }
   ],
   "source": [
    "# Pick AGG and SPY close prices\n",
    "agg_close = stocks_close.iloc[0,3]\n",
    "spy_close = stocks_close.iloc[0,8]\n",
    "                  \n",
    "# Print AGG and SPY close prices\n",
    "print(f\"Current AGG closing price: ${agg_close}\")\n",
    "print(f\"Current SPY closing price: ${spy_close}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 450,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The current value of your 50 SPY shares is $20762.00\n",
      "The current value of your 200 AGG shares is $22858.00\n",
      "The current value of your stock portfolio is $43620.00\n"
     ]
    }
   ],
   "source": [
    "# Compute the current value of shares\n",
    "spy_value = (spy) * (spy_close)\n",
    "agg_value = (agg) * (agg_close)\n",
    "stocks_total = (spy_value) + (agg_value)\n",
    "\n",
    "# Print current value of share\n",
    "print(f\"The current value of your {spy} SPY shares is ${spy_value:0.2f}\")\n",
    "print(f\"The current value of your {agg} AGG shares is ${agg_value:0.2f}\")\n",
    "print(f\"The current value of your stock portfolio is ${stocks_total:0.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Savings Health Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 451,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Savings</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Crypto</th>\n",
       "      <td>72194.672862</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stocks</th>\n",
       "      <td>43620.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Savings\n",
       "Crypto  72194.672862\n",
       "Stocks  43620.000000"
      ]
     },
     "execution_count": 451,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set monthly household income\n",
    "monthly_income = 12000\n",
    "\n",
    "# Create savings DataFrame\n",
    "savings_data = [{'Savings': crypto_total}, {'Savings': stocks_total}]\n",
    "savings_df = pd.DataFrame(savings_data, index = ['Crypto', 'Stocks'])\n",
    "total_savings = crypto_total + stocks_total\n",
    "# Display savings DataFrame\n",
    "savings_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['You have a total of $115814.67 in your savings',\n",
       " '62% of your savings is held in the crypto-currencies BTC and ETH',\n",
       " '38% of your savings is held in stocks SPY and AGG']"
      ]
     },
     "execution_count": 452,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot savings pie chart\n",
    "savings_df.plot.pie(y=\"Savings\", figsize=(5, 5))\n",
    "pie = (f'You have a total of ${total_savings:0.2f} in your savings')\n",
    "crypto_percent = (f'{((crypto_total / total_savings) * 100):0.0f}% of your savings is held in the crypto-currencies BTC and ETH')\n",
    "stock_percent = (f'{((stocks_total / total_savings) * 100):0.0f}% of your savings is held in stocks SPY and AGG')\n",
    "savings_app = [pie, crypto_percent, stock_percent]\n",
    "savings_app"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Congratulations! You have saved more than 3 months income for an emergency fund!\n"
     ]
    }
   ],
   "source": [
    "# Set ideal emergency fund\n",
    "emergency_fund = monthly_income * 3\n",
    "\n",
    "# Calculate total amount of savings\n",
    "total_savings = crypto_total + stocks_total\n",
    "\n",
    "# Validate saving health\n",
    "if total_savings >= emergency_fund:\n",
    "    savings_app_response = ('Congratulations! You have saved more than 3 months income for an emergency fund!')\n",
    "else:\n",
    "    savings_app_response = (f'You should increase your savings for an emergency fund. You currently need ${emergency_fund - total_savings} more to save 3 months income for an emergency fund')\n",
    "print(savings_app_response)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2 - Retirement Planning\n",
    "\n",
    "### Monte Carlo Simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 454,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set start and end dates of five years back from today.\n",
    "# Sample results may vary from the solution based on the time frame chosen\n",
    "start_date = pd.Timestamp('2016-05-20', tz='America/Chicago').isoformat()\n",
    "end_date = pd.Timestamp('2021-05-20', tz='America/Chicago').isoformat()\n",
    "thirty_year_end_date = pd.Timestamp('2021-05-20', tz='America/Chicago').isoformat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 455,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"5\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-06-01 00:00:00-04:00</th>\n",
       "      <td>109.36</td>\n",
       "      <td>109.5000</td>\n",
       "      <td>109.3409</td>\n",
       "      <td>109.470</td>\n",
       "      <td>2241270</td>\n",
       "      <td>241.96</td>\n",
       "      <td>243.340</td>\n",
       "      <td>241.640</td>\n",
       "      <td>243.320</td>\n",
       "      <td>50837868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-02 00:00:00-04:00</th>\n",
       "      <td>109.74</td>\n",
       "      <td>109.8900</td>\n",
       "      <td>109.7047</td>\n",
       "      <td>109.840</td>\n",
       "      <td>1322101</td>\n",
       "      <td>243.41</td>\n",
       "      <td>244.350</td>\n",
       "      <td>243.080</td>\n",
       "      <td>244.130</td>\n",
       "      <td>50298878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-05 00:00:00-04:00</th>\n",
       "      <td>109.66</td>\n",
       "      <td>109.7400</td>\n",
       "      <td>109.6000</td>\n",
       "      <td>109.660</td>\n",
       "      <td>2074161</td>\n",
       "      <td>243.98</td>\n",
       "      <td>244.300</td>\n",
       "      <td>243.760</td>\n",
       "      <td>243.965</td>\n",
       "      <td>27596403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-06 00:00:00-04:00</th>\n",
       "      <td>109.87</td>\n",
       "      <td>109.9500</td>\n",
       "      <td>109.8100</td>\n",
       "      <td>109.870</td>\n",
       "      <td>1434088</td>\n",
       "      <td>243.31</td>\n",
       "      <td>243.980</td>\n",
       "      <td>243.120</td>\n",
       "      <td>243.250</td>\n",
       "      <td>36562468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-07 00:00:00-04:00</th>\n",
       "      <td>109.81</td>\n",
       "      <td>109.8700</td>\n",
       "      <td>109.7000</td>\n",
       "      <td>109.730</td>\n",
       "      <td>1570692</td>\n",
       "      <td>243.60</td>\n",
       "      <td>243.920</td>\n",
       "      <td>242.830</td>\n",
       "      <td>243.650</td>\n",
       "      <td>38602639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-14 00:00:00-04:00</th>\n",
       "      <td>114.22</td>\n",
       "      <td>114.2800</td>\n",
       "      <td>114.1219</td>\n",
       "      <td>114.280</td>\n",
       "      <td>3711363</td>\n",
       "      <td>413.20</td>\n",
       "      <td>417.490</td>\n",
       "      <td>413.180</td>\n",
       "      <td>416.530</td>\n",
       "      <td>69027661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-17 00:00:00-04:00</th>\n",
       "      <td>114.21</td>\n",
       "      <td>115.4999</td>\n",
       "      <td>111.2600</td>\n",
       "      <td>114.165</td>\n",
       "      <td>3852318</td>\n",
       "      <td>415.39</td>\n",
       "      <td>416.390</td>\n",
       "      <td>413.360</td>\n",
       "      <td>415.550</td>\n",
       "      <td>57714535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-18 00:00:00-04:00</th>\n",
       "      <td>114.11</td>\n",
       "      <td>114.1100</td>\n",
       "      <td>114.0300</td>\n",
       "      <td>114.070</td>\n",
       "      <td>3499293</td>\n",
       "      <td>415.80</td>\n",
       "      <td>416.060</td>\n",
       "      <td>411.770</td>\n",
       "      <td>411.990</td>\n",
       "      <td>52318865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-19 00:00:00-04:00</th>\n",
       "      <td>114.62</td>\n",
       "      <td>114.6200</td>\n",
       "      <td>113.7900</td>\n",
       "      <td>113.920</td>\n",
       "      <td>6576312</td>\n",
       "      <td>406.92</td>\n",
       "      <td>411.050</td>\n",
       "      <td>405.335</td>\n",
       "      <td>410.900</td>\n",
       "      <td>94165741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-20 00:00:00-04:00</th>\n",
       "      <td>114.08</td>\n",
       "      <td>114.3000</td>\n",
       "      <td>114.0800</td>\n",
       "      <td>114.290</td>\n",
       "      <td>5647134</td>\n",
       "      <td>411.80</td>\n",
       "      <td>416.625</td>\n",
       "      <td>411.670</td>\n",
       "      <td>415.240</td>\n",
       "      <td>69426295</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                        \\\n",
       "                             open      high       low    close   volume   \n",
       "time                                                                      \n",
       "2017-06-01 00:00:00-04:00  109.36  109.5000  109.3409  109.470  2241270   \n",
       "2017-06-02 00:00:00-04:00  109.74  109.8900  109.7047  109.840  1322101   \n",
       "2017-06-05 00:00:00-04:00  109.66  109.7400  109.6000  109.660  2074161   \n",
       "2017-06-06 00:00:00-04:00  109.87  109.9500  109.8100  109.870  1434088   \n",
       "2017-06-07 00:00:00-04:00  109.81  109.8700  109.7000  109.730  1570692   \n",
       "...                           ...       ...       ...      ...      ...   \n",
       "2021-05-14 00:00:00-04:00  114.22  114.2800  114.1219  114.280  3711363   \n",
       "2021-05-17 00:00:00-04:00  114.21  115.4999  111.2600  114.165  3852318   \n",
       "2021-05-18 00:00:00-04:00  114.11  114.1100  114.0300  114.070  3499293   \n",
       "2021-05-19 00:00:00-04:00  114.62  114.6200  113.7900  113.920  6576312   \n",
       "2021-05-20 00:00:00-04:00  114.08  114.3000  114.0800  114.290  5647134   \n",
       "\n",
       "                              SPY                                       \n",
       "                             open     high      low    close    volume  \n",
       "time                                                                    \n",
       "2017-06-01 00:00:00-04:00  241.96  243.340  241.640  243.320  50837868  \n",
       "2017-06-02 00:00:00-04:00  243.41  244.350  243.080  244.130  50298878  \n",
       "2017-06-05 00:00:00-04:00  243.98  244.300  243.760  243.965  27596403  \n",
       "2017-06-06 00:00:00-04:00  243.31  243.980  243.120  243.250  36562468  \n",
       "2017-06-07 00:00:00-04:00  243.60  243.920  242.830  243.650  38602639  \n",
       "...                           ...      ...      ...      ...       ...  \n",
       "2021-05-14 00:00:00-04:00  413.20  417.490  413.180  416.530  69027661  \n",
       "2021-05-17 00:00:00-04:00  415.39  416.390  413.360  415.550  57714535  \n",
       "2021-05-18 00:00:00-04:00  415.80  416.060  411.770  411.990  52318865  \n",
       "2021-05-19 00:00:00-04:00  406.92  411.050  405.335  410.900  94165741  \n",
       "2021-05-20 00:00:00-04:00  411.80  416.625  411.670  415.240  69426295  \n",
       "\n",
       "[1000 rows x 10 columns]"
      ]
     },
     "execution_count": 455,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get 5 years' worth of historical data for SPY and AGG\n",
    "timeframe = '1D'\n",
    "historical_stock_data = alpaca.get_barset(tickers, timeframe, start = start_date, end = end_date, limit = 1000).df\n",
    "\n",
    "# Display sample data\n",
    "historical_stock_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 457,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuring a Monte Carlo simulation to forecast 30 years cumulative returns\n",
    "thirty_yr_sim = MCSimulation(historical_stock_data, [.4, .6], 500, 252 * 30)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 458,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"5\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-06-01 00:00:00-04:00</th>\n",
       "      <td>109.36</td>\n",
       "      <td>109.5000</td>\n",
       "      <td>109.3409</td>\n",
       "      <td>109.470</td>\n",
       "      <td>2241270</td>\n",
       "      <td>241.96</td>\n",
       "      <td>243.340</td>\n",
       "      <td>241.640</td>\n",
       "      <td>243.320</td>\n",
       "      <td>50837868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-02 00:00:00-04:00</th>\n",
       "      <td>109.74</td>\n",
       "      <td>109.8900</td>\n",
       "      <td>109.7047</td>\n",
       "      <td>109.840</td>\n",
       "      <td>1322101</td>\n",
       "      <td>243.41</td>\n",
       "      <td>244.350</td>\n",
       "      <td>243.080</td>\n",
       "      <td>244.130</td>\n",
       "      <td>50298878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-05 00:00:00-04:00</th>\n",
       "      <td>109.66</td>\n",
       "      <td>109.7400</td>\n",
       "      <td>109.6000</td>\n",
       "      <td>109.660</td>\n",
       "      <td>2074161</td>\n",
       "      <td>243.98</td>\n",
       "      <td>244.300</td>\n",
       "      <td>243.760</td>\n",
       "      <td>243.965</td>\n",
       "      <td>27596403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-06 00:00:00-04:00</th>\n",
       "      <td>109.87</td>\n",
       "      <td>109.9500</td>\n",
       "      <td>109.8100</td>\n",
       "      <td>109.870</td>\n",
       "      <td>1434088</td>\n",
       "      <td>243.31</td>\n",
       "      <td>243.980</td>\n",
       "      <td>243.120</td>\n",
       "      <td>243.250</td>\n",
       "      <td>36562468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06-07 00:00:00-04:00</th>\n",
       "      <td>109.81</td>\n",
       "      <td>109.8700</td>\n",
       "      <td>109.7000</td>\n",
       "      <td>109.730</td>\n",
       "      <td>1570692</td>\n",
       "      <td>243.60</td>\n",
       "      <td>243.920</td>\n",
       "      <td>242.830</td>\n",
       "      <td>243.650</td>\n",
       "      <td>38602639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-14 00:00:00-04:00</th>\n",
       "      <td>114.22</td>\n",
       "      <td>114.2800</td>\n",
       "      <td>114.1219</td>\n",
       "      <td>114.280</td>\n",
       "      <td>3711363</td>\n",
       "      <td>413.20</td>\n",
       "      <td>417.490</td>\n",
       "      <td>413.180</td>\n",
       "      <td>416.530</td>\n",
       "      <td>69027661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-17 00:00:00-04:00</th>\n",
       "      <td>114.21</td>\n",
       "      <td>115.4999</td>\n",
       "      <td>111.2600</td>\n",
       "      <td>114.165</td>\n",
       "      <td>3852318</td>\n",
       "      <td>415.39</td>\n",
       "      <td>416.390</td>\n",
       "      <td>413.360</td>\n",
       "      <td>415.550</td>\n",
       "      <td>57714535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-18 00:00:00-04:00</th>\n",
       "      <td>114.11</td>\n",
       "      <td>114.1100</td>\n",
       "      <td>114.0300</td>\n",
       "      <td>114.070</td>\n",
       "      <td>3499293</td>\n",
       "      <td>415.80</td>\n",
       "      <td>416.060</td>\n",
       "      <td>411.770</td>\n",
       "      <td>411.990</td>\n",
       "      <td>52318865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-19 00:00:00-04:00</th>\n",
       "      <td>114.62</td>\n",
       "      <td>114.6200</td>\n",
       "      <td>113.7900</td>\n",
       "      <td>113.920</td>\n",
       "      <td>6576312</td>\n",
       "      <td>406.92</td>\n",
       "      <td>411.050</td>\n",
       "      <td>405.335</td>\n",
       "      <td>410.900</td>\n",
       "      <td>94165741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-20 00:00:00-04:00</th>\n",
       "      <td>114.08</td>\n",
       "      <td>114.3000</td>\n",
       "      <td>114.0800</td>\n",
       "      <td>114.290</td>\n",
       "      <td>5647134</td>\n",
       "      <td>411.80</td>\n",
       "      <td>416.625</td>\n",
       "      <td>411.670</td>\n",
       "      <td>415.240</td>\n",
       "      <td>69426295</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                        \\\n",
       "                             open      high       low    close   volume   \n",
       "time                                                                      \n",
       "2017-06-01 00:00:00-04:00  109.36  109.5000  109.3409  109.470  2241270   \n",
       "2017-06-02 00:00:00-04:00  109.74  109.8900  109.7047  109.840  1322101   \n",
       "2017-06-05 00:00:00-04:00  109.66  109.7400  109.6000  109.660  2074161   \n",
       "2017-06-06 00:00:00-04:00  109.87  109.9500  109.8100  109.870  1434088   \n",
       "2017-06-07 00:00:00-04:00  109.81  109.8700  109.7000  109.730  1570692   \n",
       "...                           ...       ...       ...      ...      ...   \n",
       "2021-05-14 00:00:00-04:00  114.22  114.2800  114.1219  114.280  3711363   \n",
       "2021-05-17 00:00:00-04:00  114.21  115.4999  111.2600  114.165  3852318   \n",
       "2021-05-18 00:00:00-04:00  114.11  114.1100  114.0300  114.070  3499293   \n",
       "2021-05-19 00:00:00-04:00  114.62  114.6200  113.7900  113.920  6576312   \n",
       "2021-05-20 00:00:00-04:00  114.08  114.3000  114.0800  114.290  5647134   \n",
       "\n",
       "                              SPY                                       \n",
       "                             open     high      low    close    volume  \n",
       "time                                                                    \n",
       "2017-06-01 00:00:00-04:00  241.96  243.340  241.640  243.320  50837868  \n",
       "2017-06-02 00:00:00-04:00  243.41  244.350  243.080  244.130  50298878  \n",
       "2017-06-05 00:00:00-04:00  243.98  244.300  243.760  243.965  27596403  \n",
       "2017-06-06 00:00:00-04:00  243.31  243.980  243.120  243.250  36562468  \n",
       "2017-06-07 00:00:00-04:00  243.60  243.920  242.830  243.650  38602639  \n",
       "...                           ...      ...      ...      ...       ...  \n",
       "2021-05-14 00:00:00-04:00  413.20  417.490  413.180  416.530  69027661  \n",
       "2021-05-17 00:00:00-04:00  415.39  416.390  413.360  415.550  57714535  \n",
       "2021-05-18 00:00:00-04:00  415.80  416.060  411.770  411.990  52318865  \n",
       "2021-05-19 00:00:00-04:00  406.92  411.050  405.335  410.900  94165741  \n",
       "2021-05-20 00:00:00-04:00  411.80  416.625  411.670  415.240  69426295  \n",
       "\n",
       "[1000 rows x 10 columns]"
      ]
     },
     "execution_count": 458,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Printing the simulation input data\n",
    "historical_stock_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running Monte Carlo simulation number 0.\n",
      "Running Monte Carlo simulation number 10.\n",
      "Running Monte Carlo simulation number 20.\n",
      "Running Monte Carlo simulation number 30.\n",
      "Running Monte Carlo simulation number 40.\n",
      "Running Monte Carlo simulation number 50.\n",
      "Running Monte Carlo simulation number 60.\n",
      "Running Monte Carlo simulation number 70.\n",
      "Running Monte Carlo simulation number 80.\n",
      "Running Monte Carlo simulation number 90.\n",
      "Running Monte Carlo simulation number 100.\n",
      "Running Monte Carlo simulation number 110.\n",
      "Running Monte Carlo simulation number 120.\n",
      "Running Monte Carlo simulation number 130.\n",
      "Running Monte Carlo simulation number 140.\n",
      "Running Monte Carlo simulation number 150.\n",
      "Running Monte Carlo simulation number 160.\n",
      "Running Monte Carlo simulation number 170.\n",
      "Running Monte Carlo simulation number 180.\n",
      "Running Monte Carlo simulation number 190.\n",
      "Running Monte Carlo simulation number 200.\n",
      "Running Monte Carlo simulation number 210.\n",
      "Running Monte Carlo simulation number 220.\n",
      "Running Monte Carlo simulation number 230.\n",
      "Running Monte Carlo simulation number 240.\n",
      "Running Monte Carlo simulation number 250.\n",
      "Running Monte Carlo simulation number 260.\n",
      "Running Monte Carlo simulation number 270.\n",
      "Running Monte Carlo simulation number 280.\n",
      "Running Monte Carlo simulation number 290.\n",
      "Running Monte Carlo simulation number 300.\n",
      "Running Monte Carlo simulation number 310.\n",
      "Running Monte Carlo simulation number 320.\n",
      "Running Monte Carlo simulation number 330.\n",
      "Running Monte Carlo simulation number 340.\n",
      "Running Monte Carlo simulation number 350.\n",
      "Running Monte Carlo simulation number 360.\n",
      "Running Monte Carlo simulation number 370.\n",
      "Running Monte Carlo simulation number 380.\n",
      "Running Monte Carlo simulation number 390.\n",
      "Running Monte Carlo simulation number 400.\n",
      "Running Monte Carlo simulation number 410.\n",
      "Running Monte Carlo simulation number 420.\n",
      "Running Monte Carlo simulation number 430.\n",
      "Running Monte Carlo simulation number 440.\n",
      "Running Monte Carlo simulation number 450.\n",
      "Running Monte Carlo simulation number 460.\n",
      "Running Monte Carlo simulation number 470.\n",
      "Running Monte Carlo simulation number 480.\n",
      "Running Monte Carlo simulation number 490.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>490</th>\n",
       "      <th>491</th>\n",
       "      <th>492</th>\n",
       "      <th>493</th>\n",
       "      <th>494</th>\n",
       "      <th>495</th>\n",
       "      <th>496</th>\n",
       "      <th>497</th>\n",
       "      <th>498</th>\n",
       "      <th>499</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.003732</td>\n",
       "      <td>0.994589</td>\n",
       "      <td>1.001702</td>\n",
       "      <td>1.010407</td>\n",
       "      <td>1.001442</td>\n",
       "      <td>1.007317</td>\n",
       "      <td>0.994855</td>\n",
       "      <td>0.999557</td>\n",
       "      <td>1.015994</td>\n",
       "      <td>0.998134</td>\n",
       "      <td>...</td>\n",
       "      <td>0.984329</td>\n",
       "      <td>0.999152</td>\n",
       "      <td>0.998844</td>\n",
       "      <td>1.000929</td>\n",
       "      <td>1.005598</td>\n",
       "      <td>0.996821</td>\n",
       "      <td>1.008091</td>\n",
       "      <td>0.996991</td>\n",
       "      <td>1.005017</td>\n",
       "      <td>0.996011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.992728</td>\n",
       "      <td>1.002821</td>\n",
       "      <td>0.999754</td>\n",
       "      <td>1.007152</td>\n",
       "      <td>1.010287</td>\n",
       "      <td>1.015520</td>\n",
       "      <td>0.983464</td>\n",
       "      <td>0.992809</td>\n",
       "      <td>1.012018</td>\n",
       "      <td>1.006657</td>\n",
       "      <td>...</td>\n",
       "      <td>0.989595</td>\n",
       "      <td>0.994032</td>\n",
       "      <td>1.004144</td>\n",
       "      <td>1.002028</td>\n",
       "      <td>0.994908</td>\n",
       "      <td>0.999900</td>\n",
       "      <td>0.994472</td>\n",
       "      <td>0.993239</td>\n",
       "      <td>0.996408</td>\n",
       "      <td>0.996947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.991880</td>\n",
       "      <td>1.005531</td>\n",
       "      <td>0.986650</td>\n",
       "      <td>1.001468</td>\n",
       "      <td>1.011441</td>\n",
       "      <td>1.014140</td>\n",
       "      <td>0.977949</td>\n",
       "      <td>0.991718</td>\n",
       "      <td>1.017666</td>\n",
       "      <td>1.009520</td>\n",
       "      <td>...</td>\n",
       "      <td>0.982683</td>\n",
       "      <td>0.987665</td>\n",
       "      <td>0.999504</td>\n",
       "      <td>1.009328</td>\n",
       "      <td>0.998539</td>\n",
       "      <td>1.018484</td>\n",
       "      <td>0.989851</td>\n",
       "      <td>0.995398</td>\n",
       "      <td>0.997754</td>\n",
       "      <td>0.990424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.995143</td>\n",
       "      <td>1.012197</td>\n",
       "      <td>0.996824</td>\n",
       "      <td>0.995607</td>\n",
       "      <td>1.008820</td>\n",
       "      <td>1.018026</td>\n",
       "      <td>0.975756</td>\n",
       "      <td>0.983721</td>\n",
       "      <td>1.014573</td>\n",
       "      <td>1.014016</td>\n",
       "      <td>...</td>\n",
       "      <td>0.988768</td>\n",
       "      <td>0.994531</td>\n",
       "      <td>1.002905</td>\n",
       "      <td>0.992088</td>\n",
       "      <td>1.008531</td>\n",
       "      <td>1.012953</td>\n",
       "      <td>0.994769</td>\n",
       "      <td>1.010581</td>\n",
       "      <td>0.986441</td>\n",
       "      <td>0.992827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7556</th>\n",
       "      <td>7.896602</td>\n",
       "      <td>21.127818</td>\n",
       "      <td>16.085016</td>\n",
       "      <td>29.159852</td>\n",
       "      <td>25.788622</td>\n",
       "      <td>25.208766</td>\n",
       "      <td>16.055733</td>\n",
       "      <td>14.050185</td>\n",
       "      <td>15.796339</td>\n",
       "      <td>20.141901</td>\n",
       "      <td>...</td>\n",
       "      <td>7.865132</td>\n",
       "      <td>25.641177</td>\n",
       "      <td>16.971870</td>\n",
       "      <td>30.190722</td>\n",
       "      <td>41.630770</td>\n",
       "      <td>26.616227</td>\n",
       "      <td>33.189302</td>\n",
       "      <td>13.978168</td>\n",
       "      <td>13.379710</td>\n",
       "      <td>10.011440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7557</th>\n",
       "      <td>7.914022</td>\n",
       "      <td>21.412315</td>\n",
       "      <td>16.098714</td>\n",
       "      <td>29.135253</td>\n",
       "      <td>25.845173</td>\n",
       "      <td>25.099655</td>\n",
       "      <td>16.086529</td>\n",
       "      <td>14.101397</td>\n",
       "      <td>15.571302</td>\n",
       "      <td>20.068081</td>\n",
       "      <td>...</td>\n",
       "      <td>7.881961</td>\n",
       "      <td>25.671253</td>\n",
       "      <td>16.775620</td>\n",
       "      <td>30.323209</td>\n",
       "      <td>41.554618</td>\n",
       "      <td>26.787173</td>\n",
       "      <td>33.495650</td>\n",
       "      <td>14.079489</td>\n",
       "      <td>13.309803</td>\n",
       "      <td>10.023198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7558</th>\n",
       "      <td>7.923125</td>\n",
       "      <td>21.663358</td>\n",
       "      <td>15.890669</td>\n",
       "      <td>29.225126</td>\n",
       "      <td>25.568011</td>\n",
       "      <td>25.269882</td>\n",
       "      <td>16.286616</td>\n",
       "      <td>14.140916</td>\n",
       "      <td>15.663842</td>\n",
       "      <td>20.314888</td>\n",
       "      <td>...</td>\n",
       "      <td>7.842569</td>\n",
       "      <td>25.524165</td>\n",
       "      <td>16.755867</td>\n",
       "      <td>29.744315</td>\n",
       "      <td>41.903302</td>\n",
       "      <td>26.886930</td>\n",
       "      <td>33.588851</td>\n",
       "      <td>14.039681</td>\n",
       "      <td>13.276664</td>\n",
       "      <td>10.010967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7559</th>\n",
       "      <td>7.933215</td>\n",
       "      <td>21.644718</td>\n",
       "      <td>16.005259</td>\n",
       "      <td>29.283866</td>\n",
       "      <td>25.370122</td>\n",
       "      <td>25.112610</td>\n",
       "      <td>16.275778</td>\n",
       "      <td>14.113088</td>\n",
       "      <td>15.616793</td>\n",
       "      <td>20.176742</td>\n",
       "      <td>...</td>\n",
       "      <td>7.856811</td>\n",
       "      <td>25.161120</td>\n",
       "      <td>16.853266</td>\n",
       "      <td>29.796979</td>\n",
       "      <td>41.327700</td>\n",
       "      <td>26.794420</td>\n",
       "      <td>33.629132</td>\n",
       "      <td>14.001188</td>\n",
       "      <td>13.271345</td>\n",
       "      <td>10.111579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7560</th>\n",
       "      <td>7.911587</td>\n",
       "      <td>21.825015</td>\n",
       "      <td>15.808787</td>\n",
       "      <td>28.971893</td>\n",
       "      <td>25.301485</td>\n",
       "      <td>25.544207</td>\n",
       "      <td>16.460484</td>\n",
       "      <td>14.283596</td>\n",
       "      <td>15.382634</td>\n",
       "      <td>20.277391</td>\n",
       "      <td>...</td>\n",
       "      <td>7.934383</td>\n",
       "      <td>25.164745</td>\n",
       "      <td>16.939480</td>\n",
       "      <td>30.242724</td>\n",
       "      <td>42.193714</td>\n",
       "      <td>27.071172</td>\n",
       "      <td>33.296517</td>\n",
       "      <td>13.836561</td>\n",
       "      <td>13.250156</td>\n",
       "      <td>10.076317</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7561 rows × 500 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           0          1          2          3          4          5    \\\n",
       "0     1.000000   1.000000   1.000000   1.000000   1.000000   1.000000   \n",
       "1     1.003732   0.994589   1.001702   1.010407   1.001442   1.007317   \n",
       "2     0.992728   1.002821   0.999754   1.007152   1.010287   1.015520   \n",
       "3     0.991880   1.005531   0.986650   1.001468   1.011441   1.014140   \n",
       "4     0.995143   1.012197   0.996824   0.995607   1.008820   1.018026   \n",
       "...        ...        ...        ...        ...        ...        ...   \n",
       "7556  7.896602  21.127818  16.085016  29.159852  25.788622  25.208766   \n",
       "7557  7.914022  21.412315  16.098714  29.135253  25.845173  25.099655   \n",
       "7558  7.923125  21.663358  15.890669  29.225126  25.568011  25.269882   \n",
       "7559  7.933215  21.644718  16.005259  29.283866  25.370122  25.112610   \n",
       "7560  7.911587  21.825015  15.808787  28.971893  25.301485  25.544207   \n",
       "\n",
       "            6          7          8          9    ...       490        491  \\\n",
       "0      1.000000   1.000000   1.000000   1.000000  ...  1.000000   1.000000   \n",
       "1      0.994855   0.999557   1.015994   0.998134  ...  0.984329   0.999152   \n",
       "2      0.983464   0.992809   1.012018   1.006657  ...  0.989595   0.994032   \n",
       "3      0.977949   0.991718   1.017666   1.009520  ...  0.982683   0.987665   \n",
       "4      0.975756   0.983721   1.014573   1.014016  ...  0.988768   0.994531   \n",
       "...         ...        ...        ...        ...  ...       ...        ...   \n",
       "7556  16.055733  14.050185  15.796339  20.141901  ...  7.865132  25.641177   \n",
       "7557  16.086529  14.101397  15.571302  20.068081  ...  7.881961  25.671253   \n",
       "7558  16.286616  14.140916  15.663842  20.314888  ...  7.842569  25.524165   \n",
       "7559  16.275778  14.113088  15.616793  20.176742  ...  7.856811  25.161120   \n",
       "7560  16.460484  14.283596  15.382634  20.277391  ...  7.934383  25.164745   \n",
       "\n",
       "            492        493        494        495        496        497  \\\n",
       "0      1.000000   1.000000   1.000000   1.000000   1.000000   1.000000   \n",
       "1      0.998844   1.000929   1.005598   0.996821   1.008091   0.996991   \n",
       "2      1.004144   1.002028   0.994908   0.999900   0.994472   0.993239   \n",
       "3      0.999504   1.009328   0.998539   1.018484   0.989851   0.995398   \n",
       "4      1.002905   0.992088   1.008531   1.012953   0.994769   1.010581   \n",
       "...         ...        ...        ...        ...        ...        ...   \n",
       "7556  16.971870  30.190722  41.630770  26.616227  33.189302  13.978168   \n",
       "7557  16.775620  30.323209  41.554618  26.787173  33.495650  14.079489   \n",
       "7558  16.755867  29.744315  41.903302  26.886930  33.588851  14.039681   \n",
       "7559  16.853266  29.796979  41.327700  26.794420  33.629132  14.001188   \n",
       "7560  16.939480  30.242724  42.193714  27.071172  33.296517  13.836561   \n",
       "\n",
       "            498        499  \n",
       "0      1.000000   1.000000  \n",
       "1      1.005017   0.996011  \n",
       "2      0.996408   0.996947  \n",
       "3      0.997754   0.990424  \n",
       "4      0.986441   0.992827  \n",
       "...         ...        ...  \n",
       "7556  13.379710  10.011440  \n",
       "7557  13.309803  10.023198  \n",
       "7558  13.276664  10.010967  \n",
       "7559  13.271345  10.111579  \n",
       "7560  13.250156  10.076317  \n",
       "\n",
       "[7561 rows x 500 columns]"
      ]
     },
     "execution_count": 438,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Running a Monte Carlo simulation to forecast 30 years cumulative returns\n",
    "thirty_yr_sim.calc_cumulative_return()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 462,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running Monte Carlo simulation number 0.\n",
      "Running Monte Carlo simulation number 10.\n",
      "Running Monte Carlo simulation number 20.\n",
      "Running Monte Carlo simulation number 30.\n",
      "Running Monte Carlo simulation number 40.\n",
      "Running Monte Carlo simulation number 50.\n",
      "Running Monte Carlo simulation number 60.\n",
      "Running Monte Carlo simulation number 70.\n",
      "Running Monte Carlo simulation number 80.\n",
      "Running Monte Carlo simulation number 90.\n",
      "Running Monte Carlo simulation number 100.\n",
      "Running Monte Carlo simulation number 110.\n",
      "Running Monte Carlo simulation number 120.\n",
      "Running Monte Carlo simulation number 130.\n",
      "Running Monte Carlo simulation number 140.\n",
      "Running Monte Carlo simulation number 150.\n",
      "Running Monte Carlo simulation number 160.\n",
      "Running Monte Carlo simulation number 170.\n",
      "Running Monte Carlo simulation number 180.\n",
      "Running Monte Carlo simulation number 190.\n",
      "Running Monte Carlo simulation number 200.\n",
      "Running Monte Carlo simulation number 210.\n",
      "Running Monte Carlo simulation number 220.\n",
      "Running Monte Carlo simulation number 230.\n",
      "Running Monte Carlo simulation number 240.\n",
      "Running Monte Carlo simulation number 250.\n",
      "Running Monte Carlo simulation number 260.\n",
      "Running Monte Carlo simulation number 270.\n",
      "Running Monte Carlo simulation number 280.\n",
      "Running Monte Carlo simulation number 290.\n",
      "Running Monte Carlo simulation number 300.\n",
      "Running Monte Carlo simulation number 310.\n",
      "Running Monte Carlo simulation number 320.\n",
      "Running Monte Carlo simulation number 330.\n",
      "Running Monte Carlo simulation number 340.\n",
      "Running Monte Carlo simulation number 350.\n",
      "Running Monte Carlo simulation number 360.\n",
      "Running Monte Carlo simulation number 370.\n",
      "Running Monte Carlo simulation number 380.\n",
      "Running Monte Carlo simulation number 390.\n",
      "Running Monte Carlo simulation number 400.\n",
      "Running Monte Carlo simulation number 410.\n",
      "Running Monte Carlo simulation number 420.\n",
      "Running Monte Carlo simulation number 430.\n",
      "Running Monte Carlo simulation number 440.\n",
      "Running Monte Carlo simulation number 450.\n",
      "Running Monte Carlo simulation number 460.\n",
      "Running Monte Carlo simulation number 470.\n",
      "Running Monte Carlo simulation number 480.\n",
      "Running Monte Carlo simulation number 490.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'500 Simulations of Cumulative Portfolio Return Trajectories Over the Next 7560 Trading Days.'}>"
      ]
     },
     "execution_count": 462,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot simulation outcomes\n",
    "thirty_yr_sim.plot_simulation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 463,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Distribution of Final Cumuluative Returns Across All 500 Simulations'}, ylabel='Frequency'>"
      ]
     },
     "execution_count": 463,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot probability distribution and confidence intervals\n",
    "thirty_yr_sim.plot_distribution()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Retirement Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 464,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count           500.000000\n",
      "mean             19.797472\n",
      "std              16.528945\n",
      "min               1.988324\n",
      "25%               8.797226\n",
      "50%              14.762893\n",
      "75%              24.546783\n",
      "max             128.207557\n",
      "95% CI Lower      4.035319\n",
      "95% CI Upper     69.808081\n",
      "Name: 7560, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Fetch summary statistics from the Monte Carlo simulation results\n",
    "thirty_yr_summary = thirty_yr_sim.summarize_cumulative_return()\n",
    "\n",
    "# Print summary statistics\n",
    "print(thirty_yr_summary)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate the expected portfolio return at the 95% lower and upper confidence intervals based on a `$20,000` initial investment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 468,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a 95% chance that an initial investment of $20000 in the portfolio over the next 30 years will end within the range of $80706.37694744111 and $1396161.6246806844\n",
      "There is a 95% chance that an initial investment of $20000 in the portfolio over the next 30 years will end within in the range of $80706.37694744111 and $1396161.6246806844\n"
     ]
    }
   ],
   "source": [
    "# Set initial investment\n",
    "initial_investment = 20000\n",
    "\n",
    "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes of our $20,000\n",
    "ci_lower = thirty_yr_summary.loc['95% CI Lower'] * initial_investment\n",
    "ci_upper = thirty_yr_summary.loc['95% CI Upper'] * initial_investment\n",
    "\n",
    "# Print results\n",
    "print(f\"There is a 95% chance that an initial investment of ${initial_investment} in the portfolio\"\n",
    "      f\" over the next 30 years will end within the range of\"\n",
    "      f\" ${ci_lower} and ${ci_upper}\")\n",
    "\n",
    "# Print results\n",
    "print(f\"There is a 95% chance that an initial investment of ${initial_investment} in the portfolio\"\n",
    "      f\" over the next 30 years will end within in the range of\"\n",
    "      f\" ${ci_lower} and ${ci_upper}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate the expected portfolio return at the `95%` lower and upper confidence intervals based on a `50%` increase in the initial investment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 470,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a 95% chance that an investment of $30000.0 in the portfolio over the next 30 years will end within in the range of $121059.56542116166 and $2094242.4370210266\n"
     ]
    }
   ],
   "source": [
    "# Set initial investment\n",
    "increased_investment = initial_investment * 1.5\n",
    "\n",
    "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes of our $30,000\n",
    "inc_ci_lower = thirty_yr_summary.loc['95% CI Lower'] * increased_investment\n",
    "inc_ci_upper = thirty_yr_summary.loc['95% CI Upper'] * increased_investment\n",
    "\n",
    "# Print results\n",
    "print(f\"There is a 95% chance that an investment of ${increased_investment} in the portfolio\"\n",
    "      f\" over the next 30 years will end within in the range of\"\n",
    "      f\" ${inc_ci_lower} and ${inc_ci_upper}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
